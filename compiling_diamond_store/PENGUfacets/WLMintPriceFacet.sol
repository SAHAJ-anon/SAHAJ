// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++++++++++++++++++++************+++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++#@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*++++++++++++++++++++++
// ++++++++++++++++++++++#@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*++++++++++++++++++++++
// ++++++++++++++++++++++#@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*++++++++++++++++++++++
// ++++++++++++++++%%%%%%@@@@@@@%%%%%%%%%+............=%%%%%#......+%%#######++++++++++++++++
// ++++++++++++++++%@@@@@@@@@@@@%%%*+++++-            =%%%%%#      =+++++*%%#++++++++++++++++
// ++++++++++++++++%@@@@@@@@@@@@%%%:                  =%%%%%#            :%%#++++++++++++++++
// ++++++++++++++++%@@@@@@@@@@@@%%%:                  =%%%%%#            :%%#++++++++++++++++
// ++++++++++++++++%@@@@@@@@@@@@%%%:               ...=######            :%%#++++++++++++++++
// ++++++++++++++++%@@@@@@@@@@@@%%%:               +##+---------.        :%%#++++++++++++++++
// ++++++++++++++++%@@@@@@@@@@@@%%%:               +##+---------.        :%%#++++++++++++++++
// ++++++++++++++++%@@@@@@@@@@@@%%%:               +##+---------.        :%%#++++++++++++++++
// ++++++++++++++++%@@@@@@@@@@@@%%%:        .###   +##+---------.  +##=  :%%#++++++++++++++++
// ++++++++++++++++%@@@@@@@@@@@@%%%:        .***   =++=:::::::::   =**=  :%%#++++++++++++++++
// ++++++++++++++++%@@@@@@@@@@@@%%%:                                     :%%#++++++++++++++++
// ++++++++++++++++%@@@@@@@@@@@@%%%:                                     :%%#++++++++++++++++
// ++++++++++++++++%@@@@@@@@@@@@%%%:                                     :%%#++++++++++++++++
// ++++++++++++++++%@@@@@@@@@@@@%%%:                                     :%%#++++++++++++++++
// ++++++++++++++++%@@@@@@@@@@@@%%%=-------------------------------------=%%#++++++++++++++++
// ++++++++++++++++%@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#++++++++++++++++
// ++++++++++++++++*********************************************************+++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// SPDX-License-Identifier: MIT
pragma solidity 0.8.23;
import "./TestLib.sol";
contract WLMintPriceFacet is ERC721A {
    using Strings for uint256;

    modifier isNotBlankURI(string memory _uri) {
        if (bytes(_uri).length == 0) {
            revert PENGU_BLANK_URI();
        }
        _;
    }
    modifier checkZeroAddress(address _address) {
        if (_address == address(0)) {
            revert PENGU_ZERO_ADDRESS();
        }
        _;
    }
    modifier checkZeroPrice(uint256 _price) {
        if (_price == 0) {
            revert PENGU_ZERO_PRICE();
        }
        _;
    }
    modifier isNotPaused() {
        TestLib.TestStorage storage ds = TestLib.diamondStorage();
        if (ds.saleConfig == TestLib.SaleConfig.PAUSED) {
            revert PENGU_MINT_PAUSED();
        }
        _;
    }
    modifier isWLSale() {
        TestLib.TestStorage storage ds = TestLib.diamondStorage();
        if (ds.saleConfig != TestLib.SaleConfig.WL) {
            revert PENGU_WL_OG_MINT_NOT_ACTIVE();
        }
        _;
    }
    modifier isPublicSale() {
        TestLib.TestStorage storage ds = TestLib.diamondStorage();
        if (ds.saleConfig != TestLib.SaleConfig.MINT) {
            revert PENGU_PUBLIC_MINT_NOT_ACTIVE();
        }
        _;
    }
    modifier onlyTokenOwner(uint256 tokenId) {
        if (ownerOf(tokenId) != msg.sender) {
            revert PENGU_NOT_A_TOKEN_OWNER();
        }
        _;
    }
    modifier hasFreeClaim() {
        TestLib.TestStorage storage ds = TestLib.diamondStorage();
        if (ds.numberOfFreeMint + 1 > FREE_MINT_RESERVE) {
            revert PENGU_FREE_CLAIM_LIMIT_REACHED();
        }

        _;
    }
    modifier hasWlClaimLeft(uint256 _amount) {
        TestLib.TestStorage storage ds = TestLib.diamondStorage();
        if (ds.numberOfWlMint + _amount > WL_MINT_RESERVE) {
            revert PENGU_WL_CLAIM_LIMIT_REACHED();
        }

        _;
    }
    modifier alreadyClaimed() {
        TestLib.TestStorage storage ds = TestLib.diamondStorage();
        if (ds.claimed[msg.sender] + 1 > ds.claim_limit) {
            revert PENGU_FREE_MINT_ALREADY_CLAIMED();
        }
        _;
    }
    modifier alreadyWlClaimed(uint256 _amount) {
        TestLib.TestStorage storage ds = TestLib.diamondStorage();
        if (ds.wl_claimed[msg.sender] + _amount > ds.wl_claim_limit) {
            revert PENGU_WL_MINT_ALREADY_CLAIMED();
        }
        _;
    }
    modifier isInMintTransactionLimit(uint256 _amount) {
        TestLib.TestStorage storage ds = TestLib.diamondStorage();
        if (_amount > ds.tx_limit) {
            revert PENGU_MINT_TRANSACTION_LIMIT_REACHED();
        }
        _;
    }

    function WLMintPrice() external view returns (uint256) {
        TestLib.TestStorage storage ds = TestLib.diamondStorage();
        return ds.wl_mint_price;
    }
}
